name: "Build and populate cache"
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron:  '40 7 * * *'
jobs:
  tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    name: Build nix packages
    strategy:
      matrix:
        cachixName:
          - reedrw
        nixPath:
          - nixpkgs=channel:nixos-unstable
          - nixpkgs=channel:nixpkgs-unstable
          - nixpkgs=channel:nixos-20.09
    runs-on: ubuntu-latest
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v12
      with:
        nix_path: "${{ matrix.nixPath }}"

    - name: Install Cachix
      uses: cachix/cachix-action@v8
      if: ${{ matrix.cachixName != '<YOUR_CACHIX_NAME>' }}
      with:
        name: ${{ matrix.cachixName }}
        signingKey: '${{ env.CACHIX_SIGNING_KEY }}'

    - name: Checkout repository
      uses: actions/checkout@v2.3.4

    - name: Build nix packages
      run: nix run nixpkgs.nix-build-uncached -c nix-build-uncached ci.nix -A cacheOutputs

  update:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    name: Trigger NUR update
    needs: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nurRepo:
          - reedrw
    steps:
    - name: Trigger NUR update
      if: ${{ matrix.nurRepo != '<YOUR_REPO_NAME>' }}
      run: curl -XPOST "https://nur-update.herokuapp.com/update?repo=${{ matrix.nurRepo }}"

  telegram:
    name: Telegram
    needs: tests
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
    - uses: technote-space/workflow-conclusion-action@v2.0.1

    - uses: yanzay/notify-telegram@v0.1.0
      with:
        chat: ${{ env.NOTIFICATION_CHAT_ID }}
        token: ${{ env.NOTIFICATION_TOKEN }}
        status: ${{ env.WORKFLOW_CONCLUSION }}
